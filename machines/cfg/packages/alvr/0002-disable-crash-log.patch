diff --git a/alvr/launcher/src/commands.rs b/alvr/launcher/src/commands.rs
index efff07a3..81cb5164 100644
--- a/alvr/launcher/src/commands.rs
+++ b/alvr/launcher/src/commands.rs
@@ -214,7 +214,4 @@ pub fn invoke_installer() {
     try_close_steamvr_gracefully();
 
     spawn_no_window(Command::new(commands::installer_path()).arg("-q"));
-
-    // delete crash_log.txt (take advantage of the occasion to do some routine cleaning)
-    fs::remove_file(current_alvr_dir().unwrap().join(CRASH_LOG_FNAME)).ok();
 }
diff --git a/alvr/server/src/logging_backend.rs b/alvr/server/src/logging_backend.rs
index 83d42312..3f43628a 100644
--- a/alvr/server/src/logging_backend.rs
+++ b/alvr/server/src/logging_backend.rs
@@ -46,28 +46,8 @@ pub fn init_logging(log_sender: Sender<String>, events_sender: Sender<String>) {
         log_dispatch = log_dispatch.level(LevelFilter::Info);
     }
 
-    if SESSION_MANAGER.lock().get().to_settings().extra.log_to_disk {
-        log_dispatch = log_dispatch.chain(
-            fs::OpenOptions::new()
-                .write(true)
-                .create(true)
-                .truncate(true)
-                .open(ALVR_DIR.join(logging::SESSION_LOG_FNAME))
-                .unwrap(),
-        );
-    } else {
-        // this sink is required to make sure all log gets processed and forwarded to the websocket
-        log_dispatch = log_dispatch.chain(std::io::stdout());
-    }
-
-    log_dispatch
-        .chain(
-            Dispatch::new()
-                .level(LevelFilter::Error)
-                .chain(fern::log_file(ALVR_DIR.join(logging::CRASH_LOG_FNAME)).unwrap()),
-        )
-        .apply()
-        .unwrap();
+    // this sink is required to make sure all log gets processed and forwarded to the websocket
+    log_dispatch = log_dispatch.chain(std::io::stdout());
 
     logging::set_panic_hook();
 }
